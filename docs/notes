

+ Facebook Sign In - 
with permissions :- email, manage_pages, publish_stream
store access_token of the user

current jha.rajeev access token

AAAEBW1KJhUkBALWYhohwanjZCZCQJIPiV0QvKXolZC8hoeCaCrKBPobNNVg5j4DMDiXylfsHjOepzILQMOYmDz7jQsE9N3GHl6iMvCIfwZDZD


+ issue /me/accounts for this user
get page_id and page_access_token

app_source

id
login_id
source_id
name
token
last_crawl_time (on creation insert unix_timestamp(now()))


"category": "Community", 
"name": "3miktest", 
"access_token": "AAACEdEose0cBAFkPPfYfG6DHD3QXbfARGUxYzdjE1Cd2uPZCLsCACNtcvGrvg1U4LXaWZAF8l4ZA09jEND1i9foPuSL6ZAZCCA4A6NWCjFOz1tmmuZCaZBMY2qXYacxIJkZD"
"id": "128056117357365"


"category": "Website" 
"name": "3mik" 
"access_token": "AAACEdEose0cBADXf5D8V8NBwqhZAyoUdsmUQi1ydjDBW9wXMZClhcOjlOV5Gw1RQsfQbaoYvFkOdp1HTIII9z7n2N3ZAryxQxbHS3euohnyW2Qse2dit44LCyAFeQwZD", 
"id": "332362053467901" 

+ store 

facebook_id vs. page_id (source_id) for retrieval
page_id (source_id) vs. last_updated_time

cron script - wake up 
go through the app_source table
get login_id + source_id + login.access_token
 
Loop
  fire FQL using source_id + login.access_token + last_crawl_time
  process posts where updated_time > last_crawl_time
  updated_time < last_crawl_time 
     put new last_crawl_time into app_source
     break:loop

+ JOB to bring in new comments data
+ JOB to fetch post details
+ JOB to fetch user details



* post - appears in stream - with an updated_time
* so we can check stream of source_id for all posts 
 with ( stream.post.updated_time > login.source_id.last_updated_time )

* gather all posts that are >= last_updated_time
* foreach new post in stream
    get comments of post 
    foreach comments 
      if comment.time > login.source_id.stream.post.last_comment_time
        store data
        update login.source_id.stream.post.lastest_comment_time



* Data

+ who made this comment / when?
comment_list
 - fromid  : user? 100001842355230
 - time : 
 - text : whatever is written
 - 

+ on what page?

+ what post?
created_time
impressions - # of impressions for this post
(requires read_insight permissions)
message - message written in the post
permalink - URL of the post
post_id : id of the post
share_count
type




use FQL to read photos from stream
-----------------------------------------

select post_id,permalink,created_time, updated_time, 
share_count, type, impressions, message, comments 
from stream 
where source_id = 332362053467901 
and type=247
and updated_time > 1257070517
order by updated_time ASC LIMIT 10 



Post data
------------
graph API with post_id gives detail of the picture
/332362053467901_468185363218902 
w/o this - we can show


- stream.message
- stream.permalink as URL 


User
------
comment.fromID
/100001842355230
gives full user details

w/o this also - we can show link
http://www.facebook.com/profile.php?id=100001842355230
where id is comment.fromid


comment
------------
comment.text

user + comment
---------------
comment.id
332362053467901_468185363218902_1148244



{
  "data": [
    {
      "post_id": "332362053467901_468185363218902", 
      "permalink": "http://www.facebook.com/photo.php?fbid=468185346552237&set=a.468185329885572.94780.332362053467901&type=1", 
      "created_time": 1357070052, 
      "updated_time": 1357070517, 
      "share_count": 0, 
      "type": 247, 
      "impressions": null, 
      "message": "Shoes by Swati Modo", 
      "comments": {
        "can_remove": true, 
        "can_post": true, 
        "count": 1, 
        "comment_list": [
          {
            "fromid": 100001842355230, 
            "time": 1357070517, 
            "text": "love this. size 7, red sold!  rjha.x1234@gmail.com", 
            "text_tags": [
            ], 
            "id": "332362053467901_468185363218902_1148244", 
            "likes": 0, 
            "user_likes": false, 
            "post_fbid": 468188536551918
          }
        ]
      }
    }
  ]
}



Read from comment table
-------------------------
select username, fromid, text, time from comment 
where object_id =  468185346552237

object_id  = 468185346552237 (object_id is photo_id  => see permalink above)


{
  "data": [
    {
      "username": "Anonymous User", 
      "fromid": 100001842355230, 
      "text": "love this. size 7, red sold!  rjha.x1234@gmail.com", 
      "time": 1357070517
    }
  ]
}


stream has post_id
comment.object_id can also be fetched via this post_id
run the graph API /POST_ID
/332362053467901_468185363218902

{
  "id": "332362053467901_468185363218902", 
  "from": {
    "category": "Website", 
    "name": "3mik", 
    "id": "332362053467901"
  }, 
  "message": "Shoes by Swati Modo", 
  "picture": "http://photos-b.ak.fbcdn.net/hphotos-ak-prn1/27281_468185346552237_1323652079_s.jpg", 
  "link": "http://www.facebook.com/photo.php?fbid=468185346552237&set=a.468185329885572.94780.332362053467901&type=1&relevant_count=1", 
  "name": "Shoes by Swati Modo", 
  "icon": "http://static.ak.fbcdn.net/rsrc.php/v2/yz/r/StEh3RhPvjk.gif", 
  "actions": [
    {
      "name": "Comment", 
      "link": "http://www.facebook.com/332362053467901/posts/468185363218902"
    }, 
    {
      "name": "Like", 
      "link": "http://www.facebook.com/332362053467901/posts/468185363218902"
    }
  ], 
  "privacy": {
    "description": "Public", 
    "value": "EVERYONE", 
    "friends": "", 
    "networks": "", 
    "allow": "", 
    "deny": ""
  }, 
  "type": "photo", 
  "status_type": "added_photos", 
  "object_id": "468185346552237", 
  "application": {
    "name": "Soldsie", 
    "namespace": "soldsie", 
    "id": "110295729053397"
  }, 
  "created_time": "2013-01-01T19:54:12+0000", 
  "updated_time": "2013-01-01T20:01:57+0000", 
  "comments": {
    "data": [
      {
        "id": "332362053467901_468185363218902_1148244", 
        "from": {
          "name": "Rajeev N. Jha", 
          "id": "100001842355230"
        }, 
        "message": "love this. size 7, red sold!  rjha.x1234@gmail.com", 
        "created_time": "2013-01-01T20:01:57+0000"
      }
    ], 
    "count": 1
  }
}


comments + app_id
---------------------
soldsie app id
110295729053397
you cannot query on app_id from comment table because 
app_id is not indexable.

Access token 
---------------
we have long lived user tokens - with 60 Days validity
we need to check if we can actually work with page tokens
page tokens may never expire!

# JOB - Before fetching data - see if access token has expired
# Access token expiry should move when querying the next day

#refreshing access token
"Again, calling this multiple times during the same day will result only in the first call extending the expiration time." - so atleast first call on a day should work.


Rate limits
------------
# per access token?
# check for rate limit errors

sessions
----------
Do not roll sessions
force user to login after 7 days?

+ Show crawling errors on dashboard
+ show crawling errors on Admin panel


Issues
--------
FQL on stream table - you cannot filter using 
updated_time > a_timestamp

The facebook stream view seems geared towards sorting on created_time
(The way facebook timeline actually works - You do not expect a lot of comments on old posts)

/PAGE_ID/feed?since=ts1&until=ts2
since and until parameters on graph API also work using created_time and not updated_time
Hence they are of not much use to us...

Fixes
-------

#1 Using limit + offset you can page into stream (sorted  on updated_time)
for a particular source_id

#2 Then compare the timestamp of each post till you get a timestamp <= a_timestamp
in practice - The way a facebook wall works is that we should expect a lot of comments
on only 1-2 posts.

type=247 should work (type= photos created)

select post_id, created_time ,updated_time, type  from stream 
where source_id = 128056117357365
and type = 247
order by updated_time desc 
limit 3 offset 6
 

#3 get object_id for photo
# comments Table - use same trick to fetch all comments that have arrived after 
a certain time.

3miktest page - Bolero jacket post_id is 128056117357365_129345617228415
photo object_id is : 129345593895084

Now you can do a timestamp comparison on comments table

select fromid, text, username, time from comment 
where object_id = 129345593895084
and time >= 1357572798
order by time limit 25

This works because comment time is created_time.


post + thumb using graph API
------------------------------
/128056117357365_129345047228472?fields=picture,link,object_id,message
use this object_id to fetch comments using FQL


comments from FQL vs. Graph API
-----------------------------------
pulling comments from FQL requires an object_id
I do not know how much of a requirement that would be for
other type of non-photo POSTS

graph API can be used with since and until
however I am not sure of sorting order? (most likely created_time sorting order)

API call
/128056117357365_129345047228472/comments?since=1357579361&date_format=U
date_format=U is needed to fetch unix timestamp.


FQL is undoubtely clear(unless you can figure out a way to sort on comment.time)


+ Graph API should return ERROR - so callers can take appropriate action
+ All errors should be logged
+ input check for mysql DB columns


# Multiple invoices
when an invoice has been created for a comment
show invoice_no? + status  link to edit invoice ?
on invoice form - show status?

Or simply use the invoice screen for that?
we need an invoice screen


zaakpay API requirements
----------------------------

first_name
last_name
email
address
city
state
country
pincode
phone
amount




merchantIdentifier (merchant identifier)
checksum
orderId
returnUrl 
buyerEmail (valid email address)
buyerFirstName (<> last Name)
buyerLastName (max 30 no special char dash etc.)
buyerAddress (100 max)

buyerCity ( min 3 max 30)
buyerState (combo box)

buyerCountry
buyerPincode (2 to 12 digits)


buyerPhoneNumber (09886124428 / 08032906693)
txnType (1 - credit cards / debit cards)  
zpPayOption  (3 - API )

mode (0/1 - 0 for development)
currency INR  
amount (paisa)
merchantIpAddress ( buyer IP address)


txnDate (yyyy-MM-DD)
purpose (1 Goods 3 - Others)
productDescription (M  100 max)
checksum

https://api.zaakpay.com/transact
checksum
